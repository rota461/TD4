$date
	Sat Jul 10 16:25:58 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test $end
$scope module a $end
$var wire 1 ! CLK $end
$var wire 1 " RST $end
$var wire 4 # out [3:0] $end
$var wire 4 $ selector_out [3:0] $end
$var wire 2 % select [1:0] $end
$var wire 4 & load [3:0] $end
$var wire 8 ' data_bus [7:0] $end
$var wire 1 ( cflg $end
$var wire 4 ) b [3:0] $end
$var wire 4 * addr [3:0] $end
$var wire 4 + adder_out [3:0] $end
$var wire 4 , a [3:0] $end
$var wire 10 - LEDR [9:0] $end
$scope module a_reg $end
$var wire 1 ! clk $end
$var wire 1 . load $end
$var wire 1 " rst $end
$var wire 4 / d [3:0] $end
$var reg 4 0 qd [3:0] $end
$upscope $end
$scope module adder $end
$var wire 4 1 b [3:0] $end
$var wire 4 2 r [3:0] $end
$var wire 1 ( co $end
$var wire 4 3 a [3:0] $end
$upscope $end
$scope module b_reg $end
$var wire 1 ! clk $end
$var wire 4 4 d [3:0] $end
$var wire 1 5 load $end
$var wire 1 " rst $end
$var reg 4 6 qd [3:0] $end
$upscope $end
$scope module counter $end
$var wire 1 ! clk $end
$var wire 4 7 di [3:0] $end
$var wire 1 8 load $end
$var wire 1 " rst $end
$var reg 4 9 qd [3:0] $end
$upscope $end
$scope module data_selector $end
$var wire 4 : a [3:0] $end
$var wire 4 ; b [3:0] $end
$var wire 4 < out [3:0] $end
$var wire 2 = select [1:0] $end
$var reg 4 > qd [3:0] $end
$upscope $end
$scope module decoder $end
$var wire 1 ( cflg $end
$var wire 4 ? data_input [3:0] $end
$var reg 4 @ load [3:0] $end
$var reg 2 A select [1:0] $end
$upscope $end
$scope module out_put $end
$var wire 1 ! clk $end
$var wire 4 B di [3:0] $end
$var wire 1 C load $end
$var wire 1 " rst $end
$var reg 10 D LEDR [9:0] $end
$upscope $end
$scope module rom $end
$var wire 4 E addr [3:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 8 F qd [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx F
bx E
bx D
xC
bx B
bx A
bx @
bx ?
bx >
bx =
bz <
bx ;
bx :
bx 9
x8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
x(
bx '
bx &
bx %
bx $
bz #
0"
0!
$end
#5000
1"
1!
#10000
0!
#15000
b11 +
b11 /
b11 2
b11 4
b11 7
b11 B
0(
b0 $
b0 3
b0 >
0C
15
1.
18
b1011 &
b1011 @
b11 %
b11 =
b11 A
b11 1
b1011 ?
b10110011 '
b10110011 F
b0 )
b0 6
b0 ;
b0 ,
b0 0
b0 :
b0 *
b0 9
b0 E
b0 -
b0 D
1!
#20000
0!
#25000
0"
1!
#30000
0!
#35000
b110 +
b110 /
b110 2
b110 4
b110 7
b110 B
b110 1
b10110110 '
b10110110 F
b1 *
b1 9
b1 E
b11 -
b11 D
1!
#40000
0!
#45000
b1100 +
b1100 /
b1100 2
b1100 4
b1100 7
b1100 B
b1100 1
b10111100 '
b10111100 F
b10 *
b10 9
b10 E
b110 -
b110 D
1!
#50000
0!
#55000
b1000 +
b1000 /
b1000 2
b1000 4
b1000 7
b1000 B
b1000 1
b10111000 '
b10111000 F
b11 *
b11 9
b11 E
b1100 -
b1100 D
1!
#60000
0!
#65000
b100 *
b100 9
b100 E
b1000 -
b1000 D
1!
#70000
0!
#75000
b1100 +
b1100 /
b1100 2
b1100 4
b1100 7
b1100 B
b1100 1
b10111100 '
b10111100 F
b101 *
b101 9
b101 E
1!
#80000
0!
#85000
b110 +
b110 /
b110 2
b110 4
b110 7
b110 B
b110 1
b10110110 '
b10110110 F
b110 *
b110 9
b110 E
b1100 -
b1100 D
1!
#90000
0!
#95000
b11 +
b11 /
b11 2
b11 4
b11 7
b11 B
b11 1
b10110011 '
b10110011 F
b111 *
b111 9
b111 E
b110 -
b110 D
1!
#100000
0!
#105000
b1 +
b1 /
b1 2
b1 4
b1 7
b1 B
b1 1
b10110001 '
b10110001 F
b1000 *
b1000 9
b1000 E
b11 -
b11 D
1!
#110000
0!
#115000
1C
08
b111 &
b111 @
b0 +
b0 /
b0 2
b0 4
b0 7
b0 B
b0 1
b1111 ?
b11110000 '
b11110000 F
b1001 *
b1001 9
b1001 E
b1 -
b1 D
1!
#120000
0!
#125000
0C
18
b1011 &
b1011 @
b11 +
b11 /
b11 2
b11 4
b11 7
b11 B
b11 1
b1011 ?
b10110011 '
b10110011 F
b0 *
b0 9
b0 E
1!
#130000
0!
#135000
b110 +
b110 /
b110 2
b110 4
b110 7
b110 B
b110 1
b10110110 '
b10110110 F
b1 *
b1 9
b1 E
b11 -
b11 D
1!
#140000
0!
#145000
b1100 +
b1100 /
b1100 2
b1100 4
b1100 7
b1100 B
b1100 1
b10111100 '
b10111100 F
b10 *
b10 9
b10 E
b110 -
b110 D
1!
#150000
0!
